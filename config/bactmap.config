cleanup = true

process {
    beforeScript = 'module load singularity'
    executor = 'slurm'
    // errorStrategy = 'ignore'

    withName:'MULTIQC|ALIGNPSEUDOGENOMES|GET_SOFTWARE_VERSIONS|VCF2PSEUDOGENOME|SNPSITES'{
        ext.when = false
    }

    withName: 'INPUT_CHECK' {
        memory = '500.MB'
        cpus = 1
        time = '30 min'
        executor = 'local'
    }

    withName: 'BCFTOOLS_FILTER' {
        memory = '500.MB'
        cpus = 1
        time = '30 min'
    }

    withName: 'BCFTOOLS_MPILEUP' {
        memory = '500.MB'
        cpus = 1
        time = '30 min'
    }

    withName: 'BWA_INDEX' {
        memory = '500.MB'
        cpus = 4
        time = '30 min'
    }

    withName: 'BWA_MEM' {
        memory = '1.GB'
        cpus = 4
        time = '1.h'
    }

    withName: 'FASTP' {
        memory = '2.GB'
        cpus = 4
        time = '30 min'
    }

    // NOTE: Listed as a process, but unused.
    // withName: 'FASTQC' {
    //     memory = '1.GB'
    //     cpus = 1
    //     time = '30 min'
    // }

    withName: 'SAMTOOLS_FLAGSTAT' {
        memory = '1.GB'
        cpus = 1
        time = '15 min'
    }

    withName: 'SAMTOOLS_IDXSTATS' {
        memory = '1.GB'
        cpus = 1
        time = '15 min'
    }

    withName: 'SAMTOOLS_INDEX' {
        memory = '1.GB'
        cpus = 1
        time = '30 min'
    }

    withName: 'SAMTOOLS_SORT' {
        memory = '2.GB'
        cpus = 2
        time = '1 h'
    }

    withName: 'SAMTOOLS_STATS' {
        memory = '1.GB'
        cpus = 1
        time = '30 min'
    }
}

executor {
    queueSize = 200
    pollInterval = '1 min'
    queueStatInterval = '5 min'
}

singularity {
    enabled = true
    autoMounts = true
}

params {

    max_memory = '8.GB'
    max_cpus   = 8
    max_time   = '1.h'

    trim                    = true
    remove_recombination    = false
    rapidnj                 = false
    fasttree                = false
    iqtree                  = false
    raxmlng                 = false

    modules {
        'fastp' {
            args          = '--cut_front --cut_tail --trim_poly_x --cut_mean_quality 30 --qualified_quality_phred 30 --unqualified_percent_limit 10 --length_required 50'
            publish_files = ['json':'', 'html':'', 'gz':'', 'log': 'log']
        }
        'mash_sketch' {
            args = '-k 32 -m 3'
        }
        'rasusa' {
            args = '--seed 23032021'
        }
        'bwa_index' {
            args = ''
        }
        'bwa_mem' {
            args = ''
            args2 = '-F 4' // samtools view options discarding unmapped reads
            publish_files = false
        }
        'samtools_sort' {
            args = ''
            suffix = '.sorted'
        }
        'samtools_index' {
            args = ''
        }
        'bam_stats' {
            args = ''
        }
        'bcftools_mpileup' {
            args          = '--min-BQ 20 --annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SP,INFO/AD,INFO/ADF,INFO/ADR'
            args2         = '--ploidy 1 --multiallelic-caller'
            args3         = ''
            publish_files = ['gz':'', 'gz.tbi':'', 'stats.txt':'']
            publish_dir   = 'variants'
        }
        'bcftools_filter' {
            args = '--soft-filter LowQual --exclude "%QUAL<25 || FORMAT/DP<10 || MAX(FORMAT/ADF)<2 || MAX(FORMAT/ADR)<2 || MAX(FORMAT/AD)/SUM(FORMAT/DP)<0.9 || MQ<30 || MQ0F>0.1" --output-type z'
            suffix = '.filtered'
            publish_dir   = 'variants'
        }
        'gubbins' {
            args = '-v -f 50 -t hybrid'
        }
        'snpsites' {
            args = ''
        }
        'vcf2pseudogenome' {
            publish_dir = 'pseudogenomes'
        }
        'alignpseudogenomes' {
			non_GATC_threshold = 0.8
            publish_dir = 'pseudogenomes'
        }
        'rapidnj' {
            args = '-t d -b 1000 -n'
            publish_dir = 'rapidnj'
        }
        'fasttree' {
            args = '-gtr -gamma -fastest'
            publish_dir = 'fasttree'
        }
        'iqtree' {
            args = '-alrt 1000 -B 1000 -m MFP -czb'
            publish_dir = 'iqtree'
        }
        'raxmlng' {
            args = '--all --model GTR+G --bs-trees 1000'
            publish_dir = 'raxmlng'
        }
        'multiqc' {
            args = ''
            publish_files   = ['_data':'', 'html':'']
            publish_dir     = 'multiqc'
        }
    }
}